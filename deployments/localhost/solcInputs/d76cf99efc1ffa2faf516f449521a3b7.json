{
  "language": "Solidity",
  "sources": {
    "contracts/BuyCoffee.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\npragma solidity ^0.8.8;\r\n\r\n// Errors\r\nerror BuyCoffee__NotEnoughMoneyTBuyCoffee();\r\nerror BuyCoffee__NotOwner();\r\n\r\ncontract BuyCoffee {\r\n    struct Memo {\r\n        address from;\r\n        string name;\r\n        string message;\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    // Events\r\n    event CoffeeBought(\r\n        address indexed from,\r\n        string name,\r\n        string message,\r\n        uint256 amount,\r\n        uint256 timestamp\r\n    );\r\n\r\n    // State variables\r\n    address payable immutable i_owner;\r\n    Memo[] public s_memos;\r\n\r\n    constructor() {\r\n        i_owner = payable(msg.sender);\r\n    }\r\n\r\n    // Modifiers\r\n    modifier onlyOwner() {\r\n        if (msg.sender == i_owner) revert BuyCoffee__NotOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Buys coffee for the owner\r\n     * @param _name name of the purchaser of coffee\r\n     * @param _message message from the purchaser\r\n     */\r\n    function buyCoffee(\r\n        string memory _name,\r\n        string memory _message\r\n    ) public payable {\r\n        if (msg.value <= 0) {\r\n            revert BuyCoffee__NotEnoughMoneyTBuyCoffee();\r\n        }\r\n\r\n        s_memos.push(\r\n            Memo(msg.sender, _name, _message, msg.value, block.timestamp)\r\n        );\r\n\r\n        emit CoffeeBought(\r\n            msg.sender,\r\n            _name,\r\n            _message,\r\n            msg.value,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Owner of the contract can withdraw all the funds\r\n     */\r\n    function withdraw() public onlyOwner {\r\n        (bool success, ) = i_owner.call{value: address(this).balance}(\"\");\r\n        require(success);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}